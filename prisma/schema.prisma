datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  phone           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  resetCode       String?
  resetCodeExpires DateTime?
  role            Role      @default(CLIENT)
  companyId       String?
  company         Company?  @relation("CompanyEmployee", fields: [companyId], references: [id])
  messages        Message[] @relation("UserMessages")
  chats           Chat[]    @relation("UserChats")
  notifications   Notification[]

  @@map("users")
}

model Company {
  id             String   @id @default(cuid())
  name           String
  description    String?
  address        String?
  phone          String?
  email          String?
  website        String?
  inn            String?  @unique
  kpp            String?
  ogrn           String?
  bankAccount    String?
  bankName       String?
  bankBik        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deliveryTime   String
  employees      User[]   @relation("CompanyEmployee")
  images         Image[]  @relation("CompanyImages")
  messages       Message[] @relation("CompanyMessages")
  chats          Chat[]    @relation("CompanyChats")
  reviews        Review[]  @relation("CompanyReviews")
  documents      Document[]
  categoryId     String?
  category       Category? @relation(fields: [categoryId], references: [id])

  @@map("companies")
}

model Chat {
  id        String    @id @default(cuid())
  user      User      @relation("UserChats", fields: [userId], references: [id])
  userId    String
  company   Company   @relation("CompanyChats", fields: [companyId], references: [id])
  companyId String
  messages  Message[] @relation("ChatMessages")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  text      String
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId  String
  company   Company  @relation("CompanyMessages", fields: [companyId], references: [id])
  companyId String
  chat      Chat     @relation("ChatMessages", fields: [chatId], references: [id])
  chatId    String
  createdAt DateTime @default(now())

  @@map("messages")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  company   Company  @relation("CompanyImages", fields: [companyId], references: [id])
  companyId String
  createdAt DateTime @default(now())
  isLogo    Boolean  @default(false)

  @@map("images")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  text      String
  response  String?
  company   Company  @relation("CompanyReviews", fields: [companyId], references: [id])
  companyId String
  createdAt DateTime @default(now())

  @@map("reviews")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  companies   Company[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  companyId   String?

  @@map("categories")
}

model Document {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  @@map("documents")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum Role {
  ADMIN
  COMPANY
  CLIENT
} 